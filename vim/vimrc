""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" NOTE:
" - Reload the vim configuration on-the-fly with :so %
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Core configuration, no plugins dependent
"
set nocompatible                " must be first line
set background=dark

" nvim support
if !has('nvim')
" Make arrow and other keys work
  set term=$TERM
endif

" highlight current line
set cursorline

set backspace=indent,eol,start  " backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " show matching brackets/parenthesis
set incsearch                   " find as you type search
set hlsearch                    " highlight search terms

" Search is NOT case sensitive when the searched text is all lowercase
" Search becomes case sensitive when at least an uppercase letter is present
set ignorecase
set smartcase

set smartindent                 " for indentation
set shiftwidth=4                " use indents of 4 spaces
set expandtab                   " tabs are spaces, not tabs
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent

set ttyfast

set hidden                      " A buffer becomes hidden when it is abandoned

set mouse=a                     " Enable mouse scroll wheel

set signcolumn=yes              "Display the signcolumn (leftmost column with gutters & errs...)

"Show hidden characters
" set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
" set listchars=tab:>-,trail:-
" set listchars=tab:»·
set listchars=tab:··
set list

" Make the Search Wrap message EXPLICIT Again!
" I.e.: "Search hit BOTTOM, continuing at TOP"
set shortmess+=S

"" Alternate screen (when backgrounding vim)
" set t_ti= t_te=

"set previewwindow

"  "set wildmenu" enables a menu at the bottom of the vim/gvim window.
"  The meaning of "list:longest,full" is so that when you do completion in the
"  command line via tab, these events will happen:
"  1. (on the first tab) a list of completions will be shown and the command will
"  be completed to the longest common command.
"  2. (on second tab) the wildmenu will show up with all the completions that were
"  listed before.
"  To test it out, type ":spe" and then hit tab once to see 1 and hit tab again
"  to see 2.
set wildmenu
set wildmode=list:longest,full

"Always show a bottom status line
set laststatus=2

" Padding lines b/w cursor line and top / bottom of the window
set scrolloff=5

" Make switching back to Normal mode (using ESC) fast.
" 'ttimeoutlen': time in ms to wait for a key code sequence to complete
"
set ttimeoutlen=50

" Make the timeout to disambiguate b/w a start of a command and a mapped
" sequence shorter.
" E.g. after pressin '/' once, I don't want to wait the default timeout of 1s
" before doing a search
" - / => search
" - // => nohlsearch
" 'timeoutlen': Time in milliseconds to wait for a mapped sequence to complete.
set timeoutlen=250

" Do not delete % when joining lines starting with %
set formatoptions-=j

set diffopt+=vertical

"" Global tags
set tags+=tags,.tags,/home/marco/dev/system-tags

"" Leader key
let mapleader="'"

" netrw show tree mode
let g:netrw_liststyle = 3

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Plug plugins manager
"
call plug#begin('~/.vim/plugged')

" semantic code completion for C
"Plug 'Valloric/YouCompleteMe'

" Verilog syntax highlight
"Plug 'systemverilog.vim'

" colorschemes
Plug 'lokaltog/vim-distinguished'

Plug 'NLKNguyen/papercolor-theme'

" pug / jade HTML template files support
Plug 'digitaltoad/vim-pug'

" golang support
Plug 'fatih/vim-go'

" status line
Plug 'vim-airline/vim-airline'

Plug 'vim-airline/vim-airline-themes'

" ctrl+p to open a file => disabled in favor of fzf
" Plug 'vim-scripts/ctrlp.vim'

" Rust
" This is a Vim plugin that provides Rust file detection, syntax highlighting,
" formatting, Syntastic integration, and more.
"Plug 'rust-lang/rust.vim'
" Racer - code completion for Rust (used  for Rust go to definition)
"Plug 'racer-rust/vim-racer'

"" vimgrep alternative
"Plug 'EasyGrep'

" use ack for file search
Plug 'mileszs/ack.vim'

" Heuristically set buffer options
"Plug 'tpope/vim-sleuth'

" highlight specific text / words
"Plug 'Txtfmt-The-Vim-Highlighter'

" spell checking - use zg to add a word to dictionary
" Plug 'reedes/vim-lexical'

" C syntax highlighting
"Plug 'bbchung/Clamp'

"Plug 'neoclide/coc.nvim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" External syntax checker (used by rust.vim)
"Plug 'Syntastic'

"Show list of tags in a side bar (also used by rust.vim)
Plug 'majutsushi/tagbar'

" Auto format
Plug 'Chiel92/vim-autoformat'

" Auto tags mgmt
Plug 'ludovicchabant/vim-gutentags'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
" fzf (ctrl-p like) MRU functionality
" Plug 'pbogut/fzf-mru.vim'

"Plugin: es-beautifier manually loaded here, how to:
" cd ~/.vim/bundle/
" git clone git@github.com:dai-shi/es-beautifier.git
" cd es-beautifier
" npm install
Plug '~/.vim/bundle/es-beautifier/contrib/vim'

" Smooth scrolling when page up/down
Plug 'psliwka/vim-smoothie'

" Git
Plug 'vim-scripts/fugitive.vim'

" Show Git diff in the gutter (leftmost column)
Plug 'airblade/vim-gitgutter'

" Quickly show commit messages
Plug 'rhysd/git-messenger.vim'

" Show the context of the current line (class, function, ...)
Plug 'wellle/context.vim'

" vimwiki: can be used to render some wiki / markdown documents better
"Plug 'vimwiki/vimwiki'

" easy motion
" Plug 'easymotion/vim-easymotion'

" C/C++ code highlighting using coc + ccls
Plug 'jackguo380/vim-lsp-cxx-highlight'

" async grepping
"Plug 'wsdjeg/FlyGrep.vim'

"All of your Plugins must be added before the following line
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Configs
"

source ~/.vim/configs/highlight.vim

source ~/.vim/configs/ycm.vim

source ~/.vim/configs/airline.vim

source ~/.vim/configs/fzf.vim

source ~/.vim/configs/ack.vim

source ~/.vim/configs/tagbar.vim

source ~/.vim/configs/gutentags.vim

source ~/.vim/configs/context.vim

source ~/.vim/configs/easymotion.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Mappings
" NOTE: some of the mappings are defined in the configs/*.vim files
"

" Use jk sequence to exit insert mode
"inoremap jk <Esc>
" You have 150ms to do that!

""" Make navigation in quickfix window easier
"map <C-n> :cnext<CR>
"map <C-m> :cprevious<CR>

""" Buffers navigation
nnoremap <C-j> :bnext<CR>
nnoremap <C-k> :bprevious<CR>

""" Close buffer
nnoremap <leader>c :bdelete<CR>

""" Move to next window
nnoremap <Leader>w <C-w>w

""" yank to clipboard
nnoremap <leader>y "+y

" relative lines numbers
" nnoremap  <C-q> :set rnu!<CR>

"nnoremap <silent> <C-m> :call GoBackToRecentBuffer()<Enter>

" Toggle highlight
let hlstate=0
nnoremap <silent> // :if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=hlstate+1<CR>

" Highlight the current word under cursor
"
" NOTES:
"
" - `"/' is the last search pattern register
"
" - `let @/ =' is used to write in the "/" register, e.g. ` :let @/ = "foobar"'
"
nnoremap <C-h> :let @/ = printf("\\<%s\\>", escape(expand('<cword>'), '/\'))<CR> :let &hlsearch = &hlsearch<CR>

" sudo save buffer with :W
" NOTE: the '!' is used to replace the command if it already exist (e.g. when
" re-sourcing this  config)
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OSC filetype highlight
"
augroup osc_fix_highlight
  " Set the filetype based on the file's extension, but only if
  " 'filetype' has not already been set
  autocmd BufRead,BufNewFile _service setfiletype html
  autocmd BufRead,BufNewFile *.spec-template setfiletype spec
augroup END

"""""""""  vim-lexical config
"augroup lexical
"  autocmd!
"  autocmd FileType text,markdown,mkd,git,*commit*,*COMMIT*,textile,cpp,python,c,sh,make,fcs,xml call lexical#init()
"augroup END

""""""""" override heuristic indentation for this files...
autocmd Filetype javascript,pug,html,css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype sh setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

" Remove trailing spaces automatically before when saving, for specific file
" formats:
autocmd FileType
    \ c,cpp,java,php,javascript,pug,arduino,make,html,sh,css,go,perl,markdown,spec,yaml,rust,python,vim,xml,gitcommit,make,json
    \ autocmd BufWritePre <buffer> :%s/\s\+$//e

autocmd FileType go set noexpandtab

"autocmd FileType javascript autocmd BufWritePre <buffer> :call EsBeautifier()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""" rust.vim format on save
"    let g:rustfmt_autosave = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""" vim-racer
"    au FileType rust nmap <C-]> <Plug>(rust-def)

" disabled, using ycmd for completion...
"let g:racer_experimental_completer = 1

"    let g:racer_insert_paren = 1

" disabled, it's in $PATH already
"let g:racer_cmd = "~/bin/racer"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""" vim-go specific config
"" use gopls for GoDef, GoInfo
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
"" Use Coc for Go go-to-definition, mapped to CTRL-]
let g:go_def_mapping_enabled = 0
"" Use Coc for Go go-to-documentation, mapped to K
let g:go_doc_keywordprg_enabled = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"""""""" vim-autoformat
"autocmd Filetype python     autocmd BufWritePre <buffer> :Autoformat

"""""""" custom mapping for text object motions, when '{' and '}' are not in
" the first column
"
" Explanation:
" - Search bad for the regext `[ )\t]{$`
" - go to the next word
" - go to 99 count to the previous unmatched '{'.
" - no highlight search
"map [[ ?[ )\t]{$<CR>w99[{:nohls<CR>
"
" Alternatively, this function support both cases...
function! GotoStartOfFunction()
    " search() options:
    "  - b = search back
    "  - W = do not wrap
    "  - e = end of match

    " Search for '{' on the first column
    if search('^{$', 'bW') != 0
        return
    endif

    " Search for '{' preceded by ' )\t'
    if search('[ )\t]{$', 'bWe') != 0
        execute "normal w99[{"
    endif
endfunction

map <silent> [[ :call GotoStartOfFunction()<CR>

map ][ /^}$<CR>b99]}:nohls<CR>

map ]] j0[[%/{$<CR>_:nohls<CR>

map [] k$][%?^}$<CR>:nohls<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"fugitive
nnoremap <silent>gb :Gblame<Enter>

"vim gutter
nmap gc <Plug>(GitGutterPreviewHunk)
nmap gn <Plug>(GitGutterNextHunk)
nmap gp <Plug>(GitGutterPrevHunk)
nmap <leader>u <Plug>(GitGutterUndoHunk)

"git messenger
nmap <silent> gm <Plug>(git-messenger)

"git messenger
nmap <silent> mm :Man<Enter>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

source ~/.vim/configs/coc.vim

source ~/.vim/configs/vim-lsp-cxx-highlight.vim


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""" TEST for 24-bit colors
" 24-bit color support
"set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" Undercurl support
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap for do codeAction of selected region
"
vmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NOTE: needs nvim commit 2ca8f02a6461fd4710c4ecc555fbe7ee9f75a70a
"
" HOWTO use :lua peek_definition() on a valid symbol
lua << EOF
local function preview_location_callback(_, method, result)
  if result == nil or vim.tbl_isempty(result) then
    vim.lsp.log.info(method, 'No location found')
    return nil
  end
  if vim.tbl_islist(result) then
    vim.lsp.util.preview_location(result[1])
  else
    vim.lsp.util.preview_location(result)
  end
end

function pd()
  local params = vim.lsp.util.make_position_params()
  return vim.lsp.buf_request(0, 'textDocument/definition', params, preview_location_callback)
end
EOF
" TESTS

function! TestFloating()
    let buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(buf, 0, -1, v:true, ["test", "text"])
    let opts = {'relative' : 'window', 'width': 100, 'height': 100, 'col': 0,
        \ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}
    let win = nvim_open_win(buf, 0, opts)
    " optional: change highlight, otherwise Pmenu is used
    call nvim_win_set_option(win, 'winhl', 'Normal:MyHighlight')
endfunction

function! CreateCenteredFloatingWindow()
    let width = float2nr(&columns * 0.6)
    let height = float2nr(&lines * 0.6)
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
endfunction

