"
" NOTE:
"  - you can reload the vim configuration on-the-fly with :so %
"  - use ':high' to show all highlighting combinations

set nocompatible                " must be first line
set background=dark

" nvim support
if !has('nvim')
" Make arrow and other keys work
  set term=$TERM
endif

" highlight current line
set cursorline

set backspace=indent,eol,start  " backspace for dummys
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " show matching brackets/parenthesis
set incsearch                   " find as you type search
set hlsearch                    " highlight search terms

set smartcase                   " case sensitive when uc present

set smartindent                 " for indentation
set shiftwidth=4                " use indents of 4 spaces
set expandtab                   " tabs are spaces, not tabs
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent

set ttyfast

set hidden                      " A buffer becomes hidden when it is abandoned

set mouse=a                     " Enable mouse scroll wheel

set signcolumn=yes              "Always show signcolumn

"Show hidden characters
"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
"set listchars=tab:>-,trail:-
set listchars=tab:»·
set list

"set termguicolors

"set previewwindow
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"  "set wildmenu" enables a menu at the bottom of the vim/gvim window.
"  The meaning of "list:longest,full" is so that when you do completion in the command line via tab, these events will happen:
"  1. (on the first tab) a list of completions will be shown and the command will be completed to the longest common command.
"  2. (on second tab) the wildmenu will show up with all the completions that were listed before.
"  To test it out, type ":spe" and then hit tab once to see 1 and hit tab again to see 2.

set wildmenu
set wildmode=list:longest,full

"Always show a bottom status line
set laststatus=2

" Keep cursor centered vertically
set scrolloff=5

" Make switching back to Normal mode (w/ ESC) fast.
set ttimeoutlen=50

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Language Specific here

" Remove trailing spaces automatically before when saving, for specific file
" formats:
autocmd FileType
    \ c,cpp,java,php,javascript,pug,arduino,make,html,sh,css,go,perl,markdown,spec,yaml,rust,python,vim,xml,gitcommit,make
    \ autocmd BufWritePre <buffer> :%s/\s\+$//e

autocmd FileType go set noexpandtab


"autocmd FileType javascript autocmd BufWritePre <buffer> :call EsBeautifier()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" TAGS
"set tags=<path/to/1/tags>,<path/to/2/tags>,...

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Plug plugins manager
""
call plug#begin('~/.vim/plugged')

" semantic code completion for C
"Plug 'Valloric/YouCompleteMe'

" Verilog syntax highlight
"Plug 'systemverilog.vim'

" colorscheme
Plug 'lokaltog/vim-distinguished'
Plug 'NLKNguyen/papercolor-theme'


Plug 'walkermatt/vim-mapfile'

" pug / jade HTML template files support
Plug 'digitaltoad/vim-pug'

" golang support
Plug 'fatih/vim-go'

" status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ctrl+p to open a file => disabled in favor of fzf
" Plug 'vim-scripts/ctrlp.vim'


" Rust
" This is a Vim plugin that provides Rust file detection, syntax highlighting, formatting, Syntastic integration, and more.
"Plug 'rust-lang/rust.vim'
" Racer - code completion for Rust (used  for Rust go to definition)
"Plug 'racer-rust/vim-racer'

"" vimgrep alternative
"Plug 'EasyGrep'

" use ack for file search
Plug 'mileszs/ack.vim'

" git
Plug 'vim-scripts/fugitive.vim'

" Heuristically set buffer options
"Plug 'tpope/vim-sleuth'

" highlight specific text / words
"Plug 'Txtfmt-The-Vim-Highlighter'

" spell checking - use zg to add a word to dictionary
Plug 'reedes/vim-lexical'

" C syntax highlighting
"Plug 'bbchung/Clamp'

"Plug 'neoclide/coc.nvim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" External syntax checker (used by rust.vim)
"Plug 'Syntastic'

"Browse tags for current file (used by rust.vim)
Plug 'vim-scripts/Tagbar'

" Auto format
Plug 'Chiel92/vim-autoformat'

" Auto tags mgmt
Plug 'ludovicchabant/vim-gutentags'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
" fzf (ctrl-p like) MRU functionality
" Plug 'pbogut/fzf-mru.vim'


"Plugin: es-beautifier manually loaded here, how to:
" cd ~/.vim/bundle/
" git clone git@github.com:dai-shi/es-beautifier.git
" cd es-beautifier
" npm install
Plug '~/.vim/bundle/es-beautifier/contrib/vim'

" Smooth scrolling when page up/down
Plug 'psliwka/vim-smoothie'

"All of your Plugins must be added before the following line
call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""""""""""
set t_Co=256
syntax on

" Colorscheme changelog:
" - distinguished
" - desert
" - PaperColor
" - minimalist
colorscheme PaperColor
filetype on
filetype plugin on "when a file is edited its plugin file is loaded
filetype plugin indent on    " required

" Make comments italics
highlight Comment cterm=italic ctermbg=NONE
highlight Normal guibg=NONE ctermbg=232

" CursorLine match with BG
"highlight CursorLine ctermbg=234 cterm=NONE
highlight CursorLine ctermbg=8 cterm=NONE

" CursorLine transparent
" highlight CursorLine cterm=underline gui=underline guibg=NONE ctermbg=NONE


" Tweak colors for list chars
highlight SpecialKey ctermfg=darkgrey

" Colorize split bar
"highlight StatusLine  term=reverse cterm=bold ctermfg=231 ctermbg=31 gui=bold guifg=#ffffff guibg=#0087af guisp=Blue
"highlight StatusLineNC term=reverse ctermfg=231 ctermbg=238

"" NOTE: **matchadd** only working in current window (i.e., no splits, etc...)
highlight OverLength ctermbg=red ctermfg=white
call matchadd('OverLength', '\%120v.*')

" Show trailing whitespace
highlight ExtraWhitespace ctermbg=darkred
call matchadd('ExtraWhitespace', '\s\+\%#\@<!$')

" Match multiple empty lines, empty line after { or empty line before }
highlight MultiEmptyLines ctermbg=darkred ctermfg=yellow cterm=underline
call matchadd('MultiEmptyLines', '{\s*\n\s*\n\|^\s*\n\s*}\|^\s*\n\s*\n')

" 80 chars column marker
set colorcolumn=81
highlight ColorColumn ctermbg=233

" Search highlight
highlight Search ctermfg=16 ctermbg=143

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" YCM options
""
"let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_python_binary_path = "python3"
"au FileType python nmap <C-]> :YcmCompleter GoToDefinition<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" airline options

""""""" Unicode symbols: NOT NEEDED if "g:airline_powerline_fonts = 1"
"    if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
"    endif
"    let g:airline_symbols.linenr = ''
"    let g:airline_symbols.crypt = ''
"    let g:airline_symbols.paste = 'ρ'
"    let g:airline_symbols.spell = 'Ꞩ'
"    "let g:airline_symbols.spell = 'X'
"    let g:airline_symbols.notexists = '∄'
"    let g:airline_symbols.whitespace = 'Ξ'
"    let g:airline_left_sep = ''
"    let g:airline_left_alt_sep = ''
"    let g:airline_right_sep = ''
"    let g:airline_right_alt_sep = ''
"    let g:airline_symbols.branch = ''
"    let g:airline_symbols.readonly = ''
"    let g:airline_symbols.maxlinenr = ''
"""""""""
" History of themes
" 'dark'
" 'cool'
let g:airline_theme='distinguished'

" Do not show branch (section B, see manual)
let g:airline_section_b = ''

let g:airline_powerline_fonts = 1

" tabline shows the list of buffers on top
let g:airline#extensions#tabline#enabled = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" ctrlp options => disabled in favor of FZF
"    nnoremap  <C-l> :CtrlPMRUFiles<CR>
"
"   let g:ctrlp_custom_ignore = {
"     \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"     \ 'file': '\v\.(exe|so|dll|o|a|P)$',
"     \ }


"""" fzf options
let g:fzf_buffers_jump = 1
nnoremap  <C-p> :FZF<CR>
"nnoremap  <C-l> :FZFMru<CR>
nnoremap  <C-l> :History<CR>

" Use neovim floating window for fzf
if has('nvim')
  let $FZF_DEFAULT_OPTS .= ' --layout=reverse'

  function! FloatingFZF()
    let height = &lines
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)
    let col_offset = &columns / 10
    let opts = {
          \ 'relative': 'editor',
          \ 'row': height * 2 / 3,
          \ 'col': col + col_offset,
          \ 'width': width * 2 / 1,
          \ 'height': height / 3,
          \ 'style': 'minimal'
          \ }
    let buf = nvim_create_buf(v:false, v:true)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhl', 'NormalFloat:TabLine')
  endfunction

  let g:fzf_layout = { 'window': 'call FloatingFZF()' }

  highlight TabLine ctermbg=234
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Do not delete % when joining lines starting with %
set formatoptions-=j

set diffopt+=vertical

"==================== Mappings =========================
"
" Better split switching
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l

" Use jk sequence to exit insert mode
inoremap jk <Esc>
" You have 150ms to do that!

""" Make navigation in quickfix window easier
"map <C-n> :cnext<CR>
"map <C-m> :cprevious<CR>

""" Buffers navigation
nnoremap <C-j> :bnext<CR>
nnoremap <C-k> :bprevious<CR>

""" Tabs navigation
nnoremap <leader>n :tabnext<CR>
nnoremap <leader>p :tabprevious<CR>

""" closing quickfix window
nnoremap <leader>a :cclose<CR>

"""""""" relative lines numbers
nnoremap  <C-q> :set rnu!<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""" ack.vim options
cnoreabbrev Ack Ack!
nnoremap <Leader>f :Ack!<Space>

let g:ackprg = "ag"
let g:ack_default_options = " --case-sensitive --noheading --nopager --nocolor --nogroup --column --ignore .tags --hidden --ignore-dir .git"
let g:ackhighlight = 1
let g:ack_autoclose = 1
"let g:ack_autofold_results = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""" Highlight the current word under cursor
"nnoremap <leader>\ :exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))<cr>
"
"Note, this is used to write in "/" register:
" :let @/ = "foobar"

nnoremap <C-h> :let @/ = printf("\\<%s\\>", escape(expand('<cword>'), '/\'))<cr>:let &hlsearch = &hlsearch<cr>


"""""""" Save buffer using :W, to avoid read-only failure
"command! W w !sudo tee % > /dev/null
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""" netrw show tree mode
let g:netrw_liststyle = 3

"""""""""" italic font support
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

""""""""" Alternate screen (when backgrounding vim)
"set t_ti= t_te=

augroup osc_fix_highlight
  " Set the filetype based on the file's extension, but only if
  " 'filetype' has not already been set
  autocmd BufRead,BufNewFile _service setfiletype html
  autocmd BufRead,BufNewFile *.spec-template setfiletype spec
augroup END


"""""""""  vim-lexical config
augroup lexical
  autocmd!
  autocmd FileType text,markdown,mkd,git,*commit*,*COMMIT*,textile call lexical#init()
  autocmd FileType cpp,python,c,sh call lexical#init()
augroup END

highlight SpellBad ctermfg=darkred ctermbg=None

""""""""" override euristic indentation for this files...
autocmd Filetype javascript,pug,html,css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype sh setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""" rust.vim format on save
"    let g:rustfmt_autosave = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""" vim-racer
"    au FileType rust nmap <C-]> <Plug>(rust-def)

" disabled,  using ycmd for completion...
"let g:racer_experimental_completer = 1

"    let g:racer_insert_paren = 1

" disabled, it's in $PATH already
"let g:racer_cmd = "~/bin/racer"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""" vim-go specific config
"" use gopls for GoDef, GoInfo
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

"""""""" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"""""""" Tagbar
nmap <F8> :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""" vim-autoformat
"autocmd Filetype python     autocmd BufWritePre <buffer> :Autoformat

"""""""" custom mapping for text object motions
map [[ ?{$<CR>w99[{:nohls<CR>
map ][ /^}$<CR>b99]}:nohls<CR>
map ]] j0[[%/{$<CR>0:nohls<CR>
map [] k$][%?^}$<CR>:nohls<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""" vim-gutentags
function! GutentagsFilter(path) abort
    if fnamemodify(a:path, ':e') == 'cpp'
      " Using coc-nvim
      return 0
    elseif fnamemodify(a:path, ':e') == 'hpp'
      " Using coc-nvim
      return 0
    elseif fnamemodify(a:path, ':e') == 'c'
      " Using coc-nvim
      return 0
    elseif fnamemodify(a:path, ':e') == 'h'
      " Using coc-nvim
      return 0
    elseif fnamemodify(a:path, ':e') == 'python'
      " Using coc-nvim
      return 0
    elseif fnamemodify(a:path, ':e') == 'sh'
      return 1
    endif

    return 0
endfunction
let g:gutentags_enabled_user_func = 'GutentagsFilter'
let g:gutentags_ctags_tagfile = '.tags'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" WARNING: coc.nvim test in progress

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Need ccls
au FileType cpp nmap <silent> <C-]> <Plug>(coc-definition)
au FileType c nmap <silent> <C-]> <Plug>(coc-definition)
" Need coc-python
au FileType python nmap <silent> <C-]> <Plug>(coc-definition)
" Need coc-rls
au FileType rust nmap <silent> <C-]> <Plug>(coc-definition)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" NOTE: requires :CocInstall coc-hightlight
set updatetime=300
hi CocHighlightText ctermbg=18
autocmd CursorHold * call CocActionAsync('highlight')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CHANGELOG
" - enable coc.nvim
" - use coc-python and ccls with coc
" - disable YCM
" - disable gutentags everywhere
" - Map C-] for cpp / python
" - installed coc-rls, disabled vim-racer and rust.vim
