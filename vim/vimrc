"
" NOTE:
"  - you can reload the vim configuration on-the-fly with :so %
"  - use ':high' to show all highlighting combinations

set nocompatible                " must be first line
set background=dark

" nvim support
if !has('nvim')
" Make arrow and other keys work
  set term=$TERM
endif

" highlight current line
set cursorline

set backspace=indent,eol,start  " backspace for dummys
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " show matching brackets/parenthesis
set incsearch                   " find as you type search
set hlsearch                    " highlight search terms

set smartcase                   " case sensitive when uc present

set smartindent                 " for indentation
set shiftwidth=4                " use indents of 4 spaces
set expandtab                   " tabs are spaces, not tabs
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent

set ttyfast

set hid                         " A buffer becomes hidden when it is abandoned

set mouse=a                     " Enable mouse scroll wheel

"Show hidden characters
"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
"set listchars=tab:>-,trail:-
set listchars=tab:»·
set list

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tweak colors for list chars
highlight SpecialKey guifg=darkgrey ctermfg=darkgrey

syntax on

" Colorize cursolline
" hihighlight CursorLine   cterm=NONE ctermbg=darkgrey ctermfg=NONE guibg=darkred guifg=NONE
" This is transparent
highlight CursorLine   cterm=underline gui=underline guibg=NONE ctermbg=NONE

" Colorize split bar
"highlight StatusLine  term=reverse cterm=bold ctermfg=231 ctermbg=31 gui=bold guifg=#ffffff guibg=#0087af guisp=Blue
"highlight StatusLineNC term=reverse ctermfg=231 ctermbg=238

"  "set wildmenu" enables a menu at the bottom of the vim/gvim window.
"  The meaning of "list:longest,full" is so that when you do completion in the command line via tab, these events will happen:
"  1. (on the first tab) a list of completions will be shown and the command will be completed to the longest common command.
"  2. (on second tab) the wildmenu will show up with all the completions that were listed before.
"  To test it out, type ":spe" and then hit tab once to see 1 and hit tab again to see 2.

set wildmenu
set wildmode=list:longest,full

"Always show a bottom status line
set laststatus=2

" Keep cursor centered vertically
set scrolloff=5

" Make switching back to Normal mode (w/ ESC) fast.
set ttimeoutlen=50

" 80 chars column marker
set colorcolumn=81
""" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
""" match OverLength /\%81v.*/

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Language Specific here

" Remove trailing spaces automatically before when saving, for specific file
" formats:
autocmd FileType
    \ c,cpp,java,php,javascript,pug,arduino,make,html,sh,css,go,perl,markdown,spec,yaml,rust autocmd
    \ BufWritePre <buffer> :%s/\s\+$//e

autocmd FileType go set noexpandtab


"autocmd FileType javascript autocmd BufWritePre <buffer> :call EsBeautifier()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" TAGS
"set tags=<path/to/1/tags>,<path/to/2/tags>,...

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" fzf plugin
set rtp+=/usr/bin/fzf

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vundle plugins manager
""
filetype off                  " required!
set rtp+=~/.vim/bundle/Vundle.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" semantic code completion for C
Plugin 'Valloric/YouCompleteMe'

" Verilog syntax highlight
"Plugin 'systemverilog.vim'

" colorscheme
Plugin 'lokaltog/vim-distinguished'

Plugin 'walkermatt/vim-mapfile'

" pug / jade HTML template files support
Plugin 'digitaltoad/vim-pug'

" golang support
Plugin 'fatih/vim-go'

" status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" ctrl+p to open a file
Plugin 'ctrlp.vim'

" Rust 
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

"" vimgrep alternative
"Plugin 'EasyGrep'

" use ack for file search
Plugin 'mileszs/ack.vim'

" git
Plugin 'fugitive.vim'

" Heuristically set buffer options
"Plugin 'tpope/vim-sleuth'

" highlight specific text / words
"Plugin 'Txtfmt-The-Vim-Highlighter'

" spell checking - use zg to add a word to dictionary
Plugin 'reedes/vim-lexical'

" C syntax highlighting
"Plugin 'bbchung/Clamp'

"Plugin 'neoclide/coc.nvim'

" External syntax checker (used by rust.vim)
"Plugin 'Syntastic'

"Browse tags for current file (used by rust.vim)
Plugin 'Tagbar'

"Fuzzy  finder
Plugin 'junegunn/fzf.vim'

"es-beautifier manually loaded, howto:
" cd ~/.vim/bundle/
" git clone git@github.com:dai-shi/es-beautifier.git
" cd es-beautifier
" npm install
set runtimepath^=~/.vim/bundle/es-beautifier/contrib/vim

"""""""""" Keep this at the bottom
"All of your Plugins must be added before the following line
call vundle#end()            " required
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

colorscheme distinguished
filetype on
filetype plugin on "when a file is edited its plugin file is loaded
filetype plugin indent on    " required
" Make comments italics
highlight Comment cterm=italic ctermbg=NONE
highlight Normal guibg=NONE ctermbg=NONE

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" YCM options
""
"let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Powerline options

if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif

" powerline unicode symbols
let g:airline_symbols.linenr = ''
let g:airline_symbols.crypt = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.spell = 'Ꞩ'
"let g:airline_symbols.spell = 'X'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.maxlinenr = ''
" powerline theme
"let g:airline_theme='dark'
let g:airline_theme='cool'

" Do not show branch (section B, see manual)
let g:airline_section_b = ''
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$'
  \ }

set wildignore+=**/bower_components/**,**/node_modules/**,**vendor/bundle**
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:EasyGrepCommand='1'
"let g:EasyGrepRecursive=1
"let g:EasyGrepSearchCurrentBufferDir=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Do not delete % when joining lines starting with %
:set formatoptions-=j


"==================== Mappings =========================
"
" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Fast saving
nmap <leader>w :w!<cr>

""" Make navigation in quickfix window easier
"map <C-n> :cnext<CR>
"map <C-m> :cprevious<CR>

nmap <leader>n :tabnext<CR>
nmap <leader>p :tabprevious<CR>

""" closing quickfix window
nnoremap <leader>a :cclose<CR>

"""""""""" ack.vim plugin
cnoreabbrev Ack Ack!
nnoremap <Leader>f :Ack!<Space>

let g:ackprg = "ag"
let g:ack_default_options = " --case-sensitive --noheading --nopager --nocolor --nogroup --column"
let g:ackhighlight = 1
let g:ack_autoclose = 1
"let g:ack_autofold_results = 1

"""""""""" Highlight the current word under cursor 
"nnoremap <leader>\ :<C-u>let @/ = expand('<cword>')<cr>
"nnoremap <leader>\ :exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))<cr>
"
"Note, this is used to write in "/" register:
" :let @/ = "foobar"

nnoremap <leader>\ :<C-u>let @/ = printf("\\<%s\\>", escape(expand('<cword>'), '/\'))<cr>:let &hlsearch = &hlsearch<cr>

"""""""" ctrl-P for MRU files
map  <C-k> :CtrlPMRUFiles<CR>

""""""""
"command! W w !sudo tee % > /dev/null
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""" netrw show tree mode
let g:netrw_liststyle = 3


"""""""""" Visual block, cause <C-v is not working with current mappings
command! VisualBlock execute "normal! \<C-v>"

"""""""""" italic font support
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

""""""""" Alternate screen (when backgrounding vim)
"set t_ti= t_te=

augroup osc_fix_highlight
  " Set the filetype based on the file's extension, but only if
  " 'filetype' has not already been set
  autocmd BufRead,BufNewFile _service setfiletype html
  autocmd BufRead,BufNewFile *.spec-template setfiletype spec
augroup END


"""""""""  vim-lexical config
augroup lexical
  autocmd!
  autocmd FileType text,markdown,mkd,git,*commit*,*COMMIT*,textile call lexical#init()
augroup END

hi SpellBad ctermfg=darkred ctermbg=None

""""""""" override euristic indentation for this files...
autocmd Filetype javascript,pug,html,css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype sh setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

"""""""" rust.vim
let g:rustfmt_autosave = 1

"""""""" vim-racer
au FileType rust nmap <C-]> <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
let g:racer_experimental_completer = 1

""""""" vim-go specific config
"" use gpls for GoDef, GoInfo
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

"""""""" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0


"""""""" Tagbar
nmap <F8> :TagbarToggle<CR>

"""""""" custom mapping for text object motions
map [[ ?{$<CR>w99[{:nohls<CR>
map ][ /^}$<CR>b99]}:nohls<CR>
map ]] j0[[%/{$<CR>0:nohls<CR>
map [] k$][%?^}$<CR>:nohls<CR>



